// <auto-generated />
using dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace webapi.Migrations
{
    [DbContext(typeof(RafflerContext))]
    partial class RafflerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("dal.models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("city")
                        .HasMaxLength(50);

                    b.Property<string>("country")
                        .HasMaxLength(50);

                    b.Property<string>("housenumber")
                        .HasMaxLength(50);

                    b.Property<string>("province")
                        .HasMaxLength(50);

                    b.Property<string>("street")
                        .HasMaxLength(100);

                    b.Property<string>("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("ST_Address");
                });

            modelBuilder.Entity("dal.models.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("Credits");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<decimal>("Points");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<decimal>("Wallet");

                    b.Property<int?>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("TR_Balance");
                });

            modelBuilder.Entity("dal.models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Address1Id");

                    b.Property<int?>("Address2Id");

                    b.Property<int>("ContactNo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Address1Id");

                    b.HasIndex("Address2Id");

                    b.ToTable("ST_Person");
                });

            modelBuilder.Entity("dal.models.Raffle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime?>("RaffleDate");

                    b.Property<int?>("RaffleTypeId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RaffleTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Raffles");
                });

            modelBuilder.Entity("dal.models.RaffleEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int?>("RaffleId");

                    b.Property<int?>("TransactionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RaffleId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("RaffleEntries");
                });

            modelBuilder.Entity("dal.models.RaffleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("RaffleTypes");
                });

            modelBuilder.Entity("dal.models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ST_Role");
                });

            modelBuilder.Entity("dal.models.SysUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.Property<int>("isActivate");

                    b.Property<int?>("personId");

                    b.HasKey("Id");

                    b.HasIndex("personId");

                    b.ToTable("AS_User");
                });

            modelBuilder.Entity("dal.models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int?>("RaffleId");

                    b.Property<int?>("TransTypeId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RaffleId");

                    b.HasIndex("TransTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("dal.models.TransType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("TransTypes");
                });

            modelBuilder.Entity("dal.models.UserRole", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("RoleID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("AS_UserRole");
                });

            modelBuilder.Entity("dal.models.Balance", b =>
                {
                    b.HasOne("dal.models.SysUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("dal.models.Person", b =>
                {
                    b.HasOne("dal.models.Address", "Address1")
                        .WithMany()
                        .HasForeignKey("Address1Id");

                    b.HasOne("dal.models.Address", "Address2")
                        .WithMany()
                        .HasForeignKey("Address2Id");
                });

            modelBuilder.Entity("dal.models.Raffle", b =>
                {
                    b.HasOne("dal.models.RaffleType", "RaffleType")
                        .WithMany()
                        .HasForeignKey("RaffleTypeId");

                    b.HasOne("dal.models.SysUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("dal.models.RaffleEntry", b =>
                {
                    b.HasOne("dal.models.Raffle", "Raffle")
                        .WithMany()
                        .HasForeignKey("RaffleId");

                    b.HasOne("dal.models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.HasOne("dal.models.SysUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("dal.models.SysUser", b =>
                {
                    b.HasOne("dal.models.Person", "person")
                        .WithMany()
                        .HasForeignKey("personId");
                });

            modelBuilder.Entity("dal.models.Transaction", b =>
                {
                    b.HasOne("dal.models.Raffle", "Raffle")
                        .WithMany()
                        .HasForeignKey("RaffleId");

                    b.HasOne("dal.models.TransType", "TransType")
                        .WithMany()
                        .HasForeignKey("TransTypeId");

                    b.HasOne("dal.models.SysUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("dal.models.UserRole", b =>
                {
                    b.HasOne("dal.models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dal.models.SysUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
